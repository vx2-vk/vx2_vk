#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

#define MAX_PORTS 3    // The maximum number of ports that can be used concurrently

// Monitor structure
typedef struct {
    int available_ports;        // Number of available ports
    pthread_mutex_t mutex;      // Mutex for mutual exclusion
    pthread_cond_t cond;        // Condition variable for synchronization
} PortMonitor;

// Function to initialize the port monitor
void init_monitor(PortMonitor *monitor) {
    monitor->available_ports = MAX_PORTS;
    pthread_mutex_init(&monitor->mutex, NULL);
    pthread_cond_init(&monitor->cond, NULL);
}

// Function to request a port
void request_port(PortMonitor *monitor) {
    pthread_mutex_lock(&monitor->mutex);

    // Wait until there is an available port
    while (monitor->available_ports == 0) {
        printf("No available ports. Waiting...\n");
        pthread_cond_wait(&monitor->cond, &monitor->mutex);
    }

    // Decrease the number of available ports
    monitor->available_ports--;
    printf("Port granted. Remaining available ports: %d\n", monitor->available_ports);

    pthread_mutex_unlock(&monitor->mutex);
}

// Function to release a port
void release_port(PortMonitor *monitor) {
    pthread_mutex_lock(&monitor->mutex);

    // Increase the number of available ports
    monitor->available_ports++;
    printf("Port released. Remaining available ports: %d\n", monitor->available_ports);

    // Signal that a port is now available
    pthread_cond_signal(&monitor->cond);

    pthread_mutex_unlock(&monitor->mutex);
}

// Function that simulates a process using a port
void *process(void *arg) {
    PortMonitor *monitor = (PortMonitor *)arg;

    // Request a port
    request_port(monitor);

    // Simulate using the port (sleep for a while)
    sleep(2);

    // Release the port after using it
    release_port(monitor);

    return NULL;
}

int main() {
    pthread_t threads[5];
    PortMonitor monitor;

    // Initialize the monitor
    init_monitor(&monitor);

    // Create multiple threads to simulate processes requesting and releasing ports
    for (int i = 0; i < 5; i++) {
        if (pthread_create(&threads[i], NULL, process, (void *)&monitor) != 0) {
            perror("Failed to create thread");
            return 1;
        }
    }

    // Wait for all threads to finish
    for (int i = 0; i < 5; i++) {
        pthread_join(threads[i], NULL);
    }

    // Cleanup
    pthread_mutex_destroy(&monitor.mutex);
    pthread_cond_destroy(&monitor.cond);

    return 0;
}
